{
  "Header": {
    "_": [
      " This requires vsSolutionBuildEvent engine.",
      " Free plugin for Visual Studio or MSBuild Tools:",
      "  * https://github.com/3F/vsSolutionBuildEvent",
      "  * https://visualstudiogallery.msdn.microsoft.com/0d1dbfd7-ed8a-40af-ae39-281bfeca2334/",
      " Feedback: github.com/3F  or entry.reg@gmail.com"
    ],
    "Compatibility": "0.9"
  },
  "Components": [
    {
      "ClassName": "InternalComponent",
      "Enabled": true
    },
    {
      "ClassName": "UserVariableComponent",
      "Enabled": true
    },
    {
      "ClassName": "TryComponent",
      "Enabled": true
    },
    {
      "ClassName": "OWPComponent",
      "Enabled": true
    },
    {
      "ClassName": "NuGetComponent",
      "Enabled": true
    },
    {
      "ClassName": "FunctionComponent",
      "Enabled": true
    },
    {
      "ClassName": "FileComponent",
      "Enabled": true
    },
    {
      "ClassName": "DTEComponent",
      "Enabled": true
    },
    {
      "ClassName": "BuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "BoxComponent",
      "Enabled": true
    },
    {
      "ClassName": "SevenZipComponent",
      "Enabled": true
    },
    {
      "ClassName": "ConditionComponent",
      "Enabled": true
    },
    {
      "ClassName": "MSBuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "CommentComponent",
      "Enabled": true
    }
  ],
  "PreBuild": [],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "Finish",
      "Caption": "Signs Executables",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Build",
      "Confirmation": false,
      "ToConfiguration": [
        "Debug|Any CPU",
        "Release|Any CPU"
      ],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": [
          {
            "Project": "SRL",
            "Order": "After"
          }
        ]
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeCSharp, vsSolutionBuildEvent",
        "Type": "CSharp",
        "References": [
          "System.dll"
        ],
        "SmartReferences": true,
        "GenerateInMemory": true,
        "TreatWarningsAsErrors": false,
        "WarningLevel": 4,
        "FilesMode": false,
        "CachingBytecode": false,
        "LastTime": 0,
        "Command": "using ICommand = net.r_eg.vsSBE.Actions.ICommand;\nusing ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;\nusing System.IO;\nusing System;\n\nnamespace vsSolutionBuildEvent\n{\n    public class CSharpMode\n    {\n        public static int Init(ICommand cmd, ISolutionEvent evt)\n        {\n            try {\n                string BaseDir = @\"$(TargetDir)\";\n                \n                Console.WriteLine(\"Finishing x86 Build...\");\n                Finish(BaseDir + \"x86\\\\SRL.dll\", BaseDir + \"SRLx32.dll\");\n                Directory.Delete(BaseDir + \"x86\", true);                \n                \n                Console.WriteLine(\"Finishing x64 Build...\");\n                Finish(BaseDir + \"x64\\\\SRL.dll\", BaseDir + \"SRLx64.dll\");                \n                Directory.Delete(BaseDir + \"x64\", true);\n                \n                File.Delete(BaseDir + \"SRL.dll\");\n            } catch {\n                return 1;\n            }\n            return 0;\n        }\n        \n        public static void Finish(string Input, string Output){\n            byte[] PE = File.ReadAllBytes(Input);\n            PEValidate(ref PE);\n            File.WriteAllBytes(Output, PE);\n            Console.WriteLine(\"Executable Generated.\");\n        }\n        \n        public static void PEValidate(ref byte[] Data) {\n            int PEStart = BitConverter.ToInt32(Data, 0x3c);\n            int PECoffStart = PEStart + 4;\n            int PEOptionalStart = PECoffStart + 20;\n            int PECheckSum = PEOptionalStart + 64;\n            uint checkSumInFile = BitConverter.ToUInt32(Data, PECheckSum);\n            long checksum = 0;\n            var top = Math.Pow(2, 32);\n\n            for (var i = 0; i < Data.Length / 4; i++) {\n                if (i == PECheckSum / 4) {\n                    continue;\n                }\n                var dword = BitConverter.ToUInt32(Data, i * 4);\n                checksum = (checksum & 0xffffffff) + dword + (checksum >> 32);\n                if (checksum > top) {\n                    checksum = (checksum & 0xffffffff) + (checksum >> 32);\n                }\n            }\n\n            checksum = (checksum & 0xffff) + (checksum >> 16);\n            checksum = (checksum) + (checksum >> 16);\n            checksum = checksum & 0xffff;\n\n            checksum += (uint)Data.LongLength;\n            \n            BitConverter.GetBytes((uint)checksum).CopyTo(Data, PECheckSum);\n        }\n    }\n}",
        "Command__": [
          "using ICommand = net.r_eg.vsSBE.Actions.ICommand;",
          "using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;",
          "using System.IO;",
          "using System;",
          "",
          "namespace vsSolutionBuildEvent",
          "{",
          "    public class CSharpMode",
          "    {",
          "        public static int Init(ICommand cmd, ISolutionEvent evt)",
          "        {",
          "            try {",
          "                string BaseDir = @\"$(TargetDir)\";",
          "                ",
          "                Console.WriteLine(\"Finishing x86 Build...\");",
          "                Finish(BaseDir + \"x86\\\\SRL.dll\", BaseDir + \"SRLx32.dll\");",
          "                Directory.Delete(BaseDir + \"x86\", true);                ",
          "                ",
          "                Console.WriteLine(\"Finishing x64 Build...\");",
          "                Finish(BaseDir + \"x64\\\\SRL.dll\", BaseDir + \"SRLx64.dll\");                ",
          "                Directory.Delete(BaseDir + \"x64\", true);",
          "                ",
          "                File.Delete(BaseDir + \"SRL.dll\");",
          "            } catch {",
          "                return 1;",
          "            }",
          "            return 0;",
          "        }",
          "        ",
          "        public static void Finish(string Input, string Output){",
          "            byte[] PE = File.ReadAllBytes(Input);",
          "            PEValidate(ref PE);",
          "            File.WriteAllBytes(Output, PE);",
          "            Console.WriteLine(\"Executable Generated.\");",
          "        }",
          "        ",
          "        public static void PEValidate(ref byte[] Data) {",
          "            int PEStart = BitConverter.ToInt32(Data, 0x3c);",
          "            int PECoffStart = PEStart + 4;",
          "            int PEOptionalStart = PECoffStart + 20;",
          "            int PECheckSum = PEOptionalStart + 64;",
          "            uint checkSumInFile = BitConverter.ToUInt32(Data, PECheckSum);",
          "            long checksum = 0;",
          "            var top = Math.Pow(2, 32);",
          "",
          "            for (var i = 0; i < Data.Length / 4; i++) {",
          "                if (i == PECheckSum / 4) {",
          "                    continue;",
          "                }",
          "                var dword = BitConverter.ToUInt32(Data, i * 4);",
          "                checksum = (checksum & 0xffffffff) + dword + (checksum >> 32);",
          "                if (checksum > top) {",
          "                    checksum = (checksum & 0xffffffff) + (checksum >> 32);",
          "                }",
          "            }",
          "",
          "            checksum = (checksum & 0xffff) + (checksum >> 16);",
          "            checksum = (checksum) + (checksum >> 16);",
          "            checksum = checksum & 0xffff;",
          "",
          "            checksum += (uint)Data.LongLength;",
          "            ",
          "            BitConverter.GetBytes((uint)checksum).CopyTo(Data, PECheckSum);",
          "        }",
          "    }",
          "}"
        ]
      }
    }
  ],
  "CancelBuild": [],
  "WarningsBuild": [],
  "ErrorsBuild": [],
  "OWPBuild": [],
  "Transmitter": [],
  "CommandEvent": [],
  "Logging": [],
  "SlnOpened": [],
  "SlnClosed": []
}