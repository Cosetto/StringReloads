using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace SRL.Engine
{
    class AdvHD : IEngine, IDisposable
    {
        ~AdvHD()
        {
            Dispose();
        }

        const string ExportName = "SysAllocString";
        const string ModuleName = "OleAut32.dll";

        public string Name => "AdvHD";
        public bool IsCompatible()
        {

            if (Process.GetCurrentProcess().ProcessName.ToLower() != "advhd")
                return false;


            if (!File.Exists(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Rio.arc")))
                return false;

            ushort Ordinal = UnmanagedHook.GetExportOrdinal(ModuleName, ExportName);

            bool Found = true;
            foreach (var Import in UnmanagedHook.GetImports())
            {
                if (Import.Module.ToLower() == ModuleName.ToLower() && (Import.Function?.ToLower() == ExportName.ToLower() || Ordinal == Import.Ordinal))
                {
                    Found = true;
                    ImportInfo = Import;
                    break;
                }
            }

            if (!Found)
                return false;

            return true;
        }

        SRL.Wrapper.Tools.Protection OriginalProtection;
        IntPtr HookDataPtr = IntPtr.Zero;
        ImportEntry ImportInfo;

        public void InstallStrHook()
        {
            if (!SRL.Wrapper.Tools.ApplyWrapperPatch())
            {
                StringReloader.Warning("SRL Auto Engine Hook Patch Required");
                return;
            }

            if (HookDataPtr == IntPtr.Zero)
            {
                HookDataPtr = Marshal.AllocHGlobal(HookData.Length);
                Marshal.Copy(HookData, 0, HookDataPtr, HookData.Length);
                Marshal.WriteIntPtr(HookDataPtr, 0x15, StringReloader.GetDirectProcessReal());
                Marshal.WriteIntPtr(HookDataPtr, 0x29, ImportInfo.FunctionAddress);
                SRL.Wrapper.Tools.ChangeProtection(HookDataPtr, HookData.Length, SRL.Wrapper.Tools.Protection.PAGE_EXECUTE_READWRITE, out OriginalProtection);
            }
            SRL.Wrapper.Tools.ChangeProtection(ImportInfo.ImportAddress, IntPtr.Size, SRL.Wrapper.Tools.Protection.PAGE_EXECUTE_READWRITE, out SRL.Wrapper.Tools.Protection tmp);
            Marshal.WriteIntPtr(ImportInfo.ImportAddress, HookDataPtr);
            SRL.Wrapper.Tools.ChangeProtection(ImportInfo.ImportAddress, IntPtr.Size, tmp);
        }


        public void UninstallStrHook()
        {
            if (HookDataPtr != IntPtr.Zero)
            {
                SRL.Wrapper.Tools.ChangeProtection(ImportInfo.ImportAddress, IntPtr.Size, SRL.Wrapper.Tools.Protection.PAGE_EXECUTE_READWRITE, out SRL.Wrapper.Tools.Protection tmp);
                Marshal.WriteIntPtr(ImportInfo.ImportAddress, ImportInfo.FunctionAddress);
                SRL.Wrapper.Tools.ChangeProtection(ImportInfo.ImportAddress, IntPtr.Size, tmp);
            }
        }

        public void Dispose()
        {
            if (HookDataPtr != IntPtr.Zero)
            {
                UninstallStrHook();
                SRL.Wrapper.Tools.ChangeProtection(HookDataPtr, HookData.Length, OriginalProtection);
                Marshal.FreeHGlobal(HookDataPtr);
                HookDataPtr = IntPtr.Zero;
            }
        }

        //+ 0x15 = SRL; + 0x29 = RealFunc
        static byte[] _HookData = null;
        static byte[] HookData {
            get {
                if (_HookData != null)
                    return _HookData;

                string[] SkipList = new string[] {
                    "st", "ev", "bg", "*", "@", "text", "char", "timer", "effect", "movie"
                };

                List<byte> Buffer = new List<byte>();
                Buffer.AddRange(HookDataBase);

                foreach (string Skip in SkipList)
                    Buffer.AddRange(Encoding.Unicode.GetBytes(Skip + "\x0"));

                Buffer.Add(0x00);
                Buffer.Add(0x00);

                return _HookData = Buffer.ToArray();
            }
        }

        static byte[] HookDataBase = new byte[] {
            0x58, 0x87, 0x04, 0x24, 0x60, 0x50, 0x50, 0xE8, 0x34, 0x00, 0x00, 0x00, 0x85, 0xC0,
            0x74, 0x15, 0x90, 0x90, 0x90, 0x90, 0xB8, 0xAA, 0xAA, 0xAA, 0xAA, 0xFF, 0xD0, 0x89,
            0x44, 0x24, 0x1C, 0x61, 0xEB, 0x05, 0x90, 0x90, 0x90, 0x58, 0x61, 0x50, 0xB8, 0xBB,
            0xBB, 0xBB, 0xBB, 0xFF, 0xD0, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x58, 0x87, 0x04, 0x24, 0x60, 0x66,
            0x83, 0x38, 0x00, 0x75, 0x0C, 0x90, 0x90, 0x90, 0x90, 0x83, 0xEC, 0x04, 0xEB, 0x30,
            0x90, 0x90, 0x90, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x50, 0x8B, 0x04, 0x24, 0x50, 0x53,
            0xE8, 0xC9, 0x00, 0x00, 0x00, 0x8B, 0xD8, 0x85, 0xC0, 0x74, 0x21, 0x90, 0x90, 0x90,
            0x90, 0x50, 0xE8, 0x39, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x09, 0x90, 0x90, 0x90,
            0x90, 0xEB, 0xDC, 0x90, 0x90, 0x90, 0xB8, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x10, 0x90,
            0x90, 0x90, 0x83, 0xC4, 0x04, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x03, 0x90, 0x90,
            0x90, 0x83, 0xC4, 0x04, 0x89, 0x44, 0x24, 0x1C, 0x61, 0xC3, 0x60, 0x8B, 0x5C, 0x24,
            0x24, 0x93, 0x66, 0x8B, 0x08, 0x66, 0x8B, 0x13, 0x58, 0x87, 0x04, 0x24, 0x60, 0x8B,
            0x5C, 0x24, 0x24, 0x93, 0x66, 0x8B, 0x08, 0x66, 0x8B, 0x13, 0x66, 0x85, 0xC9, 0x74,
            0x21, 0x90, 0x90, 0x90, 0x90, 0x66, 0x85, 0xD2, 0x74, 0x18, 0x90, 0x90, 0x90, 0x90,
            0x83, 0xC0, 0x02, 0x83, 0xC3, 0x02, 0x66, 0x3B, 0xD1, 0x74, 0xDD, 0x90, 0x90, 0x90,
            0x90, 0xEB, 0x1B, 0x90, 0x90, 0x90, 0x66, 0x85, 0xD2, 0x74, 0x09, 0x90, 0x90, 0x90,
            0x90, 0xEB, 0x0D, 0x90, 0x90, 0x90, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x0D, 0x90,
            0x90, 0x90, 0xB8, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x03, 0x90, 0x90, 0x90, 0x89, 0x44,
            0x24, 0x1C, 0x61, 0x83, 0xC4, 0x08, 0xFF, 0x74, 0x24, 0xF8, 0xC3, 0x90, 0x90, 0x90,
            0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x58, 0x87, 0x04, 0x24, 0x85, 0xC0,
            0x75, 0x0E, 0x90, 0x90, 0x90, 0x90, 0xE8, 0x00, 0x00, 0x00, 0x58, 0x87, 0x04, 0x24,
            0x85, 0xC0, 0x75, 0x0E, 0x90, 0x90, 0x90, 0x90, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x58,
            0x83, 0xC0, 0x3B, 0xC3, 0x66, 0x83, 0x38, 0x00, 0x74, 0x09, 0x90, 0x90, 0x90, 0x90,
            0xEB, 0x09, 0x90, 0x90, 0x90, 0xB8, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x83, 0xC0, 0x02,
            0x66, 0x83, 0x38, 0x00, 0x75, 0xF7, 0x90, 0x90, 0x90, 0x90, 0x83, 0xC0, 0x02, 0x66,
            0x83, 0x38, 0x00, 0x74, 0xE4, 0x90, 0x90, 0x90, 0x90, 0xC3, 0x90, 0x90, 0x90, 0x90,
            0x90, 0x90
        };
    }
}
